name: LLM Unit Tests

# Cancel previous runs in the PR when you push new commits
concurrency:
  group: ${{ github.workflow }}-llm-unittest-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths:
      - "python/llm/**"
      - ".github/workflows/llm_unit_tests.yml"
      - ".github/workflows/llm-binary-build.yml"
      - ".github/actions/llm/setup-llm-env/action.yml"
      - ".github/actions/llm/remove-llm-env/action.yml"
      - ".github/actions/llm/cli-test-linux/action.yml"
      - ".github/actions/llm/cli-test-windows/action.yml"
      - ".github/actions/llm/download-llm-binary/action.yml"
  pull_request:
    branches: [main]
    paths:
      - "python/llm/**"
      - ".github/workflows/llm_unit_tests.yml"
      - ".github/workflows/llm-binary-build.yml"
      - ".github/actions/llm/setup-llm-env/action.yml"
      - ".github/actions/llm/remove-llm-env/action.yml"
      - ".github/actions/llm/cli-test-linux/action.yml"
      - ".github/actions/llm/cli-test-windows/action.yml"
      - ".github/actions/llm/download-llm-binary/action.yml"
  workflow_dispatch:
  workflow_call:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-python-version:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup-python-version.outputs.python-version }}
    steps:
      - name: setup-python-version
        id: setup-python-version
        run: |
          if [ ${{ github.event_name }} == 'schedule' ]; then
            python_version='["3.9", "3.10", "3.11"]'
          else
            python_version='["3.11"]'
          fi
          list=$(echo ${python_version} | jq -c)
          echo "python-version=${list}" >> "$GITHUB_OUTPUT"
  llm-unit-test:
    needs: [setup-python-version]
    strategy:
      fail-fast: false
      matrix:
        os: [windows, ubuntu-20.04-lts]
        python-version: ${{ fromJson(needs.setup-python-version.outputs.python-version) }}
        include:
          - os: windows
            instruction: AVX-VNNI-UT
          - os: ubuntu-20.04-lts
            instruction: avx512
    runs-on: [self-hosted, llm, "${{matrix.instruction}}", "${{matrix.os}}"]
    env:
      THREAD_NUM: 24
      ANALYTICS_ZOO_ROOT: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools==58.0.4
          python -m pip install --upgrade wheel

          # May remove later
          pip uninstall sentence-transformers -y || true

      - name: Get Langchain version
        shell: bash
        id: get_langchain_version
        run: |
          pip uninstall langchain -y
          pip install langchain
          LANGCHAIN_VERSION=$(pip show langchain | grep Version | cut -d " " -f 2)
          LANGCHAIN_REF="langchain==$LANGCHAIN_VERSION"
          echo "langchain_ver=$LANGCHAIN_REF" >> $GITHUB_OUTPUT

      - name: Checkout Langchain repo
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          repository: "langchain-ai/langchain"
          ref: ${{ fromJson(steps.get_langchain_version.outputs.langchain_ver) }}
          path: langchain_upstream